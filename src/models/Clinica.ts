// src/models/Clinica.ts - VERS√ÉO CORRIGIDA

import { query } from '../config/database';
import { 
  Clinica, 
  ClinicaCreateInput, 
  ClinicaUpdateInput,
  ResponsavelTecnico,
  ResponsavelTecnicoCreateInput,
  ResponsavelTecnicoUpdateInput,
  ClinicaProfile
} from '../types/clinic';

export class ClinicaModel {
  
  // Buscar cl√≠nica por ID com respons√°veis t√©cnicos
  static async findById(id: number): Promise<ClinicaProfile | null> {
    try {
      // Buscar dados da cl√≠nica
      const clinicQuery = `
        SELECT * FROM Clinicas WHERE id = ?
      `;
      const clinicResult = await query(clinicQuery, [id]);
      
      if (clinicResult.length === 0) {
        return null;
      }
      
      const clinica = clinicResult[0];
      
      // Buscar respons√°veis t√©cnicos
      const responsaveisQuery = `
        SELECT * FROM Responsaveis_Tecnicos 
        WHERE clinica_id = ? AND status = 'ativo'
        ORDER BY created_at ASC
      `;
      const responsaveis = await query(responsaveisQuery, [id]);
      
      return {
        clinica,
        responsaveis_tecnicos: responsaveis
      };
    } catch (error) {
      console.error('Erro ao buscar cl√≠nica por ID:', error);
      throw new Error('Erro ao buscar cl√≠nica');
    }
  }
  
  // Buscar cl√≠nica por c√≥digo
  static async findByCode(codigo: string): Promise<Clinica | null> {
    try {
      const selectQuery = `SELECT * FROM Clinicas WHERE codigo = ?`;
      const result = await query(selectQuery, [codigo]);
      return result.length > 0 ? result[0] : null;
    } catch (error) {
      console.error('Erro ao buscar cl√≠nica por c√≥digo:', error);
      throw new Error('Erro ao buscar cl√≠nica');
    }
  }
  
  // Buscar cl√≠nica por usu√°rio (para login)
  static async findByUser(usuario: string): Promise<Clinica | null> {
    try {
      const selectQuery = `SELECT * FROM Clinicas WHERE usuario = ?`;
      const result = await query(selectQuery, [usuario]);
      return result.length > 0 ? result[0] : null;
    } catch (error) {
      console.error('Erro ao buscar cl√≠nica por usu√°rio:', error);
      throw new Error('Erro ao buscar cl√≠nica');
    }
  }
  
  // Criar nova cl√≠nica
  static async create(clinicaData: ClinicaCreateInput): Promise<Clinica> {
    try {
      const insertQuery = `
        INSERT INTO Clinicas (
          nome, codigo, cnpj, endereco, cidade, estado, cep, 
          telefone, email, website, logo_url, observacoes, 
          usuario, senha, status
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `;
      
      const values = [
        clinicaData.nome,
        clinicaData.codigo,
        clinicaData.cnpj || null,
        clinicaData.endereco || null,
        clinicaData.cidade || null,
        clinicaData.estado || null,
        clinicaData.cep || null,
        clinicaData.telefone || null,
        clinicaData.email || null,
        clinicaData.website || null,
        clinicaData.logo_url || null,
        clinicaData.observacoes || null,
        clinicaData.usuario || null,
        clinicaData.senha || null,
        clinicaData.status || 'ativo'
      ];
      
      const result = await query(insertQuery, values);
      const insertId = result.insertId;
      
      // Buscar a cl√≠nica rec√©m-criada
      const newClinica = await this.findByIdSimple(insertId);
      if (!newClinica) {
        throw new Error('Erro ao buscar cl√≠nica rec√©m-criada');
      }
      
      return newClinica;
    } catch (error) {
      console.error('Erro ao criar cl√≠nica:', error);
      throw new Error('Erro ao criar cl√≠nica');
    }
  }
  
  // ‚úÖ M√âTODO CORRIGIDO - Atualizar cl√≠nica
  static async update(id: number, clinicaData: ClinicaUpdateInput): Promise<Clinica | null> {
    try {
      // ‚úÖ CORRE√á√ÉO 1: Filtrar campos que N√ÉO devem ser atualizados
      const fieldsToExclude = ['id', 'created_at', 'updated_at'];
      const updateFields: string[] = [];
      const values: any[] = [];
      
      console.log('üîß Dados recebidos para atualiza√ß√£o:', clinicaData);
      
      Object.entries(clinicaData).forEach(([key, value]) => {
        // ‚úÖ CORRE√á√ÉO 2: Pular campos que n√£o devem ser atualizados
        if (value !== undefined && !fieldsToExclude.includes(key)) {
          updateFields.push(`${key} = ?`);
          values.push(value);
        }
      });
      
      if (updateFields.length === 0) {
        console.log('‚ö†Ô∏è  Nenhum campo v√°lido para atualizar');
        throw new Error('Nenhum campo v√°lido para atualizar');
      }
      
      // ‚úÖ CORRE√á√ÉO 3: Query limpa sem duplica√ß√µes
      const updateQuery = `
        UPDATE Clinicas 
        SET ${updateFields.join(', ')}, updated_at = CURRENT_TIMESTAMP
        WHERE id = ?
      `;
      
      values.push(id);
      
      console.log('üîß Query de atualiza√ß√£o:', updateQuery);
      console.log('üîß Valores:', values);
      
      const result = await query(updateQuery, values);
      
      if (result.affectedRows === 0) {
        console.log('‚ö†Ô∏è  Nenhuma linha afetada na atualiza√ß√£o');
        return null;
      }
      
      console.log('‚úÖ Cl√≠nica atualizada com sucesso');
      
      // Buscar a cl√≠nica atualizada
      return await this.findByIdSimple(id);
    } catch (error) {
      console.error('‚ùå Erro ao atualizar cl√≠nica:', error);
      throw new Error('Erro ao atualizar cl√≠nica');
    }
  }
  
  // Buscar cl√≠nica por ID (apenas dados da cl√≠nica)
  private static async findByIdSimple(id: number): Promise<Clinica | null> {
    try {
      const selectQuery = `SELECT * FROM Clinicas WHERE id = ?`;
      const result = await query(selectQuery, [id]);
      return result.length > 0 ? result[0] : null;
    } catch (error) {
      console.error('Erro ao buscar cl√≠nica:', error);
      throw new Error('Erro ao buscar cl√≠nica');
    }
  }
  
  // Verificar se c√≥digo j√° existe
  static async checkCodeExists(codigo: string, excludeId?: number): Promise<boolean> {
    try {
      let checkQuery = `SELECT id FROM Clinicas WHERE codigo = ?`;
      let params: any[] = [codigo];
      
      if (excludeId) {
        checkQuery += ` AND id != ?`;
        params.push(excludeId);
      }
      
      const result = await query(checkQuery, params);
      return result.length > 0;
    } catch (error) {
      console.error('Erro ao verificar c√≥digo:', error);
      throw new Error('Erro ao verificar c√≥digo');
    }
  }
  
  // Verificar se usu√°rio j√° existe
  static async checkUserExists(usuario: string, excludeId?: number): Promise<boolean> {
    try {
      let checkQuery = `SELECT id FROM Clinicas WHERE usuario = ?`;
      let params: any[] = [usuario];
      
      if (excludeId) {
        checkQuery += ` AND id != ?`;
        params.push(excludeId);
      }
      
      const result = await query(checkQuery, params);
      return result.length > 0;
    } catch (error) {
      console.error('Erro ao verificar usu√°rio:', error);
      throw new Error('Erro ao verificar usu√°rio');
    }
  }
}

// Modelo para Respons√°veis T√©cnicos
export class ResponsavelTecnicoModel {
  
  // Criar respons√°vel t√©cnico
  static async create(responsavelData: ResponsavelTecnicoCreateInput): Promise<ResponsavelTecnico> {
    try {
      const insertQuery = `
        INSERT INTO Responsaveis_Tecnicos (
          clinica_id, nome, crm, especialidade, telefone, email, status
        ) VALUES (?, ?, ?, ?, ?, ?, ?)
      `;
      
      const values = [
        responsavelData.clinica_id,
        responsavelData.nome,
        responsavelData.crm,
        responsavelData.especialidade,
        responsavelData.telefone || null,
        responsavelData.email || null,
        responsavelData.status || 'ativo'
      ];
      
      const result = await query(insertQuery, values);
      const insertId = result.insertId;
      
      // Buscar o respons√°vel rec√©m-criado
      const newResponsavel = await this.findById(insertId);
      if (!newResponsavel) {
        throw new Error('Erro ao buscar respons√°vel rec√©m-criado');
      }
      
      return newResponsavel;
    } catch (error) {
      console.error('Erro ao criar respons√°vel t√©cnico:', error);
      throw new Error('Erro ao criar respons√°vel t√©cnico');
    }
  }
  
  // Buscar respons√°vel por ID
  static async findById(id: number): Promise<ResponsavelTecnico | null> {
    try {
      const selectQuery = `SELECT * FROM Responsaveis_Tecnicos WHERE id = ?`;
      const result = await query(selectQuery, [id]);
      return result.length > 0 ? result[0] : null;
    } catch (error) {
      console.error('Erro ao buscar respons√°vel por ID:', error);
      throw new Error('Erro ao buscar respons√°vel');
    }
  }
  
  // Buscar respons√°veis por cl√≠nica
  static async findByClinicaId(clinicaId: number): Promise<ResponsavelTecnico[]> {
    try {
      const selectQuery = `
        SELECT * FROM Responsaveis_Tecnicos 
        WHERE clinica_id = ? AND status = 'ativo'
        ORDER BY created_at ASC
      `;
      const result = await query(selectQuery, [clinicaId]);
      return result;
    } catch (error) {
      console.error('Erro ao buscar respons√°veis da cl√≠nica:', error);
      throw new Error('Erro ao buscar respons√°veis');
    }
  }
  
  // ‚úÖ M√âTODO CORRIGIDO - Atualizar respons√°vel t√©cnico
  static async update(id: number, responsavelData: ResponsavelTecnicoUpdateInput): Promise<ResponsavelTecnico | null> {
    try {
      // ‚úÖ CORRE√á√ÉO: Filtrar campos que N√ÉO devem ser atualizados
      const fieldsToExclude = ['id', 'clinica_id', 'created_at', 'updated_at'];
      const updateFields: string[] = [];
      const values: any[] = [];
      
      Object.entries(responsavelData).forEach(([key, value]) => {
        if (value !== undefined && !fieldsToExclude.includes(key)) {
          updateFields.push(`${key} = ?`);
          values.push(value);
        }
      });
      
      if (updateFields.length === 0) {
        throw new Error('Nenhum campo v√°lido para atualizar');
      }
      
      const updateQuery = `
        UPDATE Responsaveis_Tecnicos 
        SET ${updateFields.join(', ')}, updated_at = CURRENT_TIMESTAMP
        WHERE id = ?
      `;
      
      values.push(id);
      
      const result = await query(updateQuery, values);
      
      if (result.affectedRows === 0) {
        return null;
      }
      
      // Buscar o respons√°vel atualizado
      return await this.findById(id);
    } catch (error) {
      console.error('Erro ao atualizar respons√°vel:', error);
      throw new Error('Erro ao atualizar respons√°vel');
    }
  }
  
  // Deletar respons√°vel t√©cnico (soft delete)
  static async delete(id: number): Promise<boolean> {
    try {
      const updateQuery = `
        UPDATE Responsaveis_Tecnicos 
        SET status = 'inativo', updated_at = CURRENT_TIMESTAMP
        WHERE id = ?
      `;
      const result = await query(updateQuery, [id]);
      return result.affectedRows > 0;
    } catch (error) {
      console.error('Erro ao deletar respons√°vel:', error);
      throw new Error('Erro ao deletar respons√°vel');
    }
  }
  
  // Verificar se CRM j√° existe na cl√≠nica
  static async checkCrmExists(clinicaId: number, crm: string, excludeId?: number): Promise<boolean> {
    try {
      let checkQuery = `
        SELECT id FROM Responsaveis_Tecnicos 
        WHERE clinica_id = ? AND crm = ? AND status = 'ativo'
      `;
      let params: any[] = [clinicaId, crm];
      
      if (excludeId) {
        checkQuery += ` AND id != ?`;
        params.push(excludeId);
      }
      
      const result = await query(checkQuery, params);
      return result.length > 0;
    } catch (error) {
      console.error('Erro ao verificar CRM:', error);
      throw new Error('Erro ao verificar CRM');
    }
  }
}