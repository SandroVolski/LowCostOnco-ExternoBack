// src/models/SolicitacaoAutorizacao.ts - VERS√ÉO CORRIGIDA

import { query } from '../config/database';
import { SolicitacaoAutorizacao, SolicitacaoCreateInput, SolicitacaoUpdateInput } from '../types/solicitacao';

export class SolicitacaoAutorizacaoModel {
  
  // Criar nova solicita√ß√£o
  static async create(dadosSolicitacao: SolicitacaoCreateInput): Promise<SolicitacaoAutorizacao> {
    console.log('üîß Criando nova solicita√ß√£o de autoriza√ß√£o...');
    console.log('üìã Dados recebidos no modelo:', {
      paciente_id: dadosSolicitacao.paciente_id,
      tipo_paciente_id: typeof dadosSolicitacao.paciente_id,
      clinica_id: dadosSolicitacao.clinica_id,
      cliente_nome: dadosSolicitacao.cliente_nome
    });
    
    const insertQuery = `
      INSERT INTO Solicitacoes_Autorizacao (
        clinica_id, paciente_id, hospital_nome, hospital_codigo,
        cliente_nome, cliente_codigo, sexo, data_nascimento, idade, data_solicitacao,
        diagnostico_cid, diagnostico_descricao, local_metastases,
        estagio_t, estagio_n, estagio_m, estagio_clinico,
        tratamento_cirurgia_radio, tratamento_quimio_adjuvante,
        tratamento_quimio_primeira_linha, tratamento_quimio_segunda_linha,
        finalidade, performance_status, siglas, ciclos_previstos, ciclo_atual,
        superficie_corporal, peso, altura,
        medicamentos_antineoplasticos, dose_por_m2, dose_total, via_administracao,
        dias_aplicacao_intervalo, medicacoes_associadas,
        medico_assinatura_crm, numero_autorizacao, observacoes
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `;
    
    const values = [
      dadosSolicitacao.clinica_id,
      dadosSolicitacao.paciente_id || null,
      dadosSolicitacao.hospital_nome,
      dadosSolicitacao.hospital_codigo,
      dadosSolicitacao.cliente_nome,
      dadosSolicitacao.cliente_codigo,
      dadosSolicitacao.sexo,
      dadosSolicitacao.data_nascimento,
      dadosSolicitacao.idade,
      dadosSolicitacao.data_solicitacao,
      dadosSolicitacao.diagnostico_cid,
      dadosSolicitacao.diagnostico_descricao,
      dadosSolicitacao.local_metastases || null,
      dadosSolicitacao.estagio_t || null,
      dadosSolicitacao.estagio_n || null,
      dadosSolicitacao.estagio_m || null,
      dadosSolicitacao.estagio_clinico || null,
      dadosSolicitacao.tratamento_cirurgia_radio || null,
      dadosSolicitacao.tratamento_quimio_adjuvante || null,
      dadosSolicitacao.tratamento_quimio_primeira_linha || null,
      dadosSolicitacao.tratamento_quimio_segunda_linha || null,
      dadosSolicitacao.finalidade,
      dadosSolicitacao.performance_status,
      dadosSolicitacao.siglas || null,
      dadosSolicitacao.ciclos_previstos,
      dadosSolicitacao.ciclo_atual,
      dadosSolicitacao.superficie_corporal,
      dadosSolicitacao.peso,
      dadosSolicitacao.altura,
      dadosSolicitacao.medicamentos_antineoplasticos,
      dadosSolicitacao.dose_por_m2,
      dadosSolicitacao.dose_total,
      dadosSolicitacao.via_administracao,
      dadosSolicitacao.dias_aplicacao_intervalo,
      dadosSolicitacao.medicacoes_associadas || null,
      dadosSolicitacao.medico_assinatura_crm,
      dadosSolicitacao.numero_autorizacao || null,
      dadosSolicitacao.observacoes || null
    ];
    
    try {
      console.log('üîß Executando query de inser√ß√£o...');
      console.log('üìã Valores a serem inseridos:', values);
      
      const result = await query(insertQuery, values);
      const insertId = result.insertId;
      
      console.log('‚úÖ Solicita√ß√£o criada com ID:', insertId);
      
      // Buscar a solicita√ß√£o rec√©m-criada
      const novaSolicitacao = await this.findById(insertId);
      if (!novaSolicitacao) {
        throw new Error('Erro ao buscar solicita√ß√£o rec√©m-criada');
      }
      
      return novaSolicitacao;
    } catch (error) {
      console.error('‚ùå Erro ao criar solicita√ß√£o:', error);
      throw new Error('Erro ao criar solicita√ß√£o de autoriza√ß√£o');
    }
  }
  
  // Buscar solicita√ß√£o por ID
  static async findById(id: number): Promise<SolicitacaoAutorizacao | null> {
    const selectQuery = `
      SELECT s.*, c.nome as clinica_nome, p.Paciente_Nome as paciente_nome
      FROM Solicitacoes_Autorizacao s
      LEFT JOIN Clinicas c ON s.clinica_id = c.id
      LEFT JOIN Pacientes_Clinica p ON s.paciente_id = p.id
      WHERE s.id = ?
    `;
    
    try {
      const result = await query(selectQuery, [id]);
      return result.length > 0 ? result[0] : null;
    } catch (error) {
      console.error('Erro ao buscar solicita√ß√£o por ID:', error);
      throw new Error('Erro ao buscar solicita√ß√£o');
    }
  }
  
  // ‚úÖ M√âTODO CORRIGIDO - Listar solicita√ß√µes por cl√≠nica
  static async findByClinicaId(clinicaId: number, params: { page?: number; limit?: number } = {}): Promise<{
    data: SolicitacaoAutorizacao[];
    pagination: {
      page: number;
      limit: number;
      total: number;
      totalPages: number;
    };
  }> {
    const { page = 1, limit = 10 } = params;
    const offset = (page - 1) * limit;
    
    // ‚úÖ CORRE√á√ÉO: Validar e garantir que limit e offset sejam n√∫meros inteiros
    const safeLimit = Math.max(1, Math.min(100, Math.floor(Number(limit))));
    const safeOffset = Math.max(0, Math.floor(Number(offset)));
    
    // ‚úÖ CORRE√á√ÉO: Construir query com LIMIT/OFFSET direto na string (n√£o como par√¢metros)
    const selectQuery = `
      SELECT s.*, c.nome as clinica_nome, p.Paciente_Nome as paciente_nome
      FROM Solicitacoes_Autorizacao s
      LEFT JOIN Clinicas c ON s.clinica_id = c.id
      LEFT JOIN Pacientes_Clinica p ON s.paciente_id = p.id
      WHERE s.clinica_id = ?
      ORDER BY s.created_at DESC
      LIMIT ${safeLimit} OFFSET ${safeOffset}
    `;
    
    const countQuery = `
      SELECT COUNT(*) as total 
      FROM Solicitacoes_Autorizacao 
      WHERE clinica_id = ?
    `;
    
    try {
      console.log('üîß Executando queries da cl√≠nica...');
      console.log('Query de busca:', selectQuery);
      console.log('Par√¢metros:', [clinicaId]);
      
      // Executar contagem
      const countResult = await query(countQuery, [clinicaId]);
      
      // ‚úÖ CORRE√á√ÉO: Executar busca apenas com clinicaId como par√¢metro
      const solicitacoes = await query(selectQuery, [clinicaId]);
      
      const total = countResult[0]?.total || 0;
      const totalPages = Math.ceil(total / safeLimit);
      
      console.log(`‚úÖ Sucesso! ${solicitacoes.length} solicita√ß√µes encontradas de um total de ${total}`);
      
      return {
        data: solicitacoes,
        pagination: {
          page: Number(page),
          limit: Number(safeLimit),
          total,
          totalPages
        }
      };
    } catch (error) {
      console.error('‚ùå Erro ao buscar solicita√ß√µes da cl√≠nica:', error);
      throw new Error('Erro ao buscar solicita√ß√µes');
    }
  }
  
  // ‚úÖ NOVO M√âTODO - Listar todas as solicita√ß√µes (para o endpoint geral)
  static async findAll(params: { page?: number; limit?: number } = {}): Promise<{
    data: SolicitacaoAutorizacao[];
    pagination: {
      page: number;
      limit: number;
      total: number;
      totalPages: number;
    };
  }> {
    const { page = 1, limit = 10 } = params;
    const offset = (page - 1) * limit;
    
    // Validar e garantir que limit e offset sejam n√∫meros inteiros
    const safeLimit = Math.max(1, Math.min(100, Math.floor(Number(limit))));
    const safeOffset = Math.max(0, Math.floor(Number(offset)));
    
    // Construir query com LIMIT/OFFSET direto na string
    const selectQuery = `
      SELECT s.*, c.nome as clinica_nome, p.Paciente_Nome as paciente_nome
      FROM Solicitacoes_Autorizacao s
      LEFT JOIN Clinicas c ON s.clinica_id = c.id
      LEFT JOIN Pacientes_Clinica p ON s.paciente_id = p.id
      ORDER BY s.created_at DESC
      LIMIT ${safeLimit} OFFSET ${safeOffset}
    `;
    
    const countQuery = `
      SELECT COUNT(*) as total 
      FROM Solicitacoes_Autorizacao
    `;
    
    try {
      console.log('üîß Executando queries gerais...');
      
      // Executar contagem
      const countResult = await query(countQuery, []);
      
      // Executar busca
      const solicitacoes = await query(selectQuery, []);
      
      const total = countResult[0]?.total || 0;
      const totalPages = Math.ceil(total / safeLimit);
      
      console.log(`‚úÖ Sucesso! ${solicitacoes.length} solicita√ß√µes encontradas de um total de ${total}`);
      
      return {
        data: solicitacoes,
        pagination: {
          page: Number(page),
          limit: Number(safeLimit),
          total,
          totalPages
        }
      };
    } catch (error) {
      console.error('‚ùå Erro ao buscar todas as solicita√ß√µes:', error);
      throw new Error('Erro ao buscar solicita√ß√µes');
    }
  }
  
  // Atualizar status da solicita√ß√£o
  static async updateStatus(id: number, dadosAtualizacao: SolicitacaoUpdateInput): Promise<SolicitacaoAutorizacao | null> {
    const updateFields: string[] = [];
    const values: any[] = [];
    
    Object.entries(dadosAtualizacao).forEach(([key, value]) => {
      if (value !== undefined) {
        updateFields.push(`${key} = ?`);
        values.push(value);
      }
    });
    
    if (updateFields.length === 0) {
      throw new Error('Nenhum campo para atualizar');
    }
    
    const updateQuery = `
      UPDATE Solicitacoes_Autorizacao 
      SET ${updateFields.join(', ')}, updated_at = CURRENT_TIMESTAMP
      WHERE id = ?
    `;
    
    values.push(id);
    
    try {
      const result = await query(updateQuery, values);
      
      if (result.affectedRows === 0) {
        return null; // Solicita√ß√£o n√£o encontrada
      }
      
      // Buscar a solicita√ß√£o atualizada
      return await this.findById(id);
    } catch (error) {
      console.error('Erro ao atualizar solicita√ß√£o:', error);
      throw new Error('Erro ao atualizar solicita√ß√£o');
    }
  }
  
  // Deletar solicita√ß√£o
  static async delete(id: number): Promise<boolean> {
    const deleteQuery = `DELETE FROM Solicitacoes_Autorizacao WHERE id = ?`;
    
    try {
      const result = await query(deleteQuery, [id]);
      return result.affectedRows > 0;
    } catch (error) {
      console.error('Erro ao deletar solicita√ß√£o:', error);
      throw new Error('Erro ao deletar solicita√ß√£o');
    }
  }
  
  // Buscar solicita√ß√µes por status
  static async findByStatus(status: string): Promise<SolicitacaoAutorizacao[]> {
    const selectQuery = `
      SELECT s.*, c.nome as clinica_nome, p.Paciente_Nome as paciente_nome
      FROM Solicitacoes_Autorizacao s
      LEFT JOIN Clinicas c ON s.clinica_id = c.id
      LEFT JOIN Pacientes_Clinica p ON s.paciente_id = p.id
      WHERE s.status = ?
      ORDER BY s.created_at DESC
    `;
    
    try {
      const result = await query(selectQuery, [status]);
      return result;
    } catch (error) {
      console.error('Erro ao buscar solicita√ß√µes por status:', error);
      throw new Error('Erro ao buscar solicita√ß√µes');
    }
  }
}