const axios = require('axios');

const BASE_URL = 'http://localhost:3001';

// Configura√ß√µes de teste
const TEST_CONFIG = {
  baseURL: BASE_URL,
  timeout: 60000, // 60 segundos
  validateStatus: () => true // Aceitar todos os status codes
};

const api = axios.create(TEST_CONFIG);

// Fun√ß√£o para fazer requisi√ß√µes simult√¢neas
async function testConcurrentRequests(count = 10) {
  console.log(`\nüîÑ Testando ${count} requisi√ß√µes simult√¢neas...`);
  
  const promises = Array.from({ length: count }, (_, i) => 
    api.get('/api/performance/stats').then(res => ({
      index: i,
      status: res.status,
      duration: res.headers['x-response-time'] || 'N/A'
    }))
  );
  
  const startTime = Date.now();
  const results = await Promise.allSettled(promises);
  const endTime = Date.now();
  
  const successful = results.filter(r => r.status === 'fulfilled').length;
  const failed = results.filter(r => r.status === 'rejected').length;
  
  console.log(`‚úÖ ${successful} bem-sucedidas, ‚ùå ${failed} falharam`);
  console.log(`‚è±Ô∏è  Tempo total: ${endTime - startTime}ms`);
  
  return results;
}

// Fun√ß√£o para testar timeout customizado
async function testCustomTimeout() {
  console.log('\n‚è∞ Testando timeout customizado...');
  
  try {
    // Configurar timeout muito baixo (1 segundo)
    const response = await api.put('/api/performance/config', {
      timeoutThreshold: 1000,
      slowRequestThreshold: 500
    });
    
    console.log('üìù Configura√ß√£o atualizada:', response.data);
    
    // Fazer uma requisi√ß√£o que pode ser lenta
    const testResponse = await api.get('/api/pacientes');
    console.log(`‚úÖ Requisi√ß√£o conclu√≠da: ${testResponse.status}`);
    
    // Restaurar configura√ß√£o original
    await api.put('/api/performance/config', {
      timeoutThreshold: 30000,
      slowRequestThreshold: 5000
    });
    
  } catch (error) {
    console.log(`‚ö†Ô∏è Timeout ou erro esperado: ${error.message}`);
  }
}

// Fun√ß√£o para testar circuit breaker
async function testCircuitBreaker() {
  console.log('\n‚ö° Testando circuit breaker...');
  
  // Ativar circuit breaker
  await api.put('/api/performance/config', {
    enableCircuitBreaker: true,
    criticalRequestThreshold: 100 // Muito baixo para for√ßar falhas
  });
  
  console.log('üîß Circuit breaker ativado com threshold baixo');
  
  // Fazer v√°rias requisi√ß√µes para um endpoint inexistente (for√ßar falhas)
  for (let i = 0; i < 6; i++) {
    try {
      await api.get('/api/endpoint-inexistente');
    } catch (error) {
      console.log(`‚ùå Falha ${i + 1}: ${error.response?.status || 'Network Error'}`);
    }
  }
  
  // Verificar se circuit breaker foi ativado
  const stats = await api.get('/api/performance/stats');
  console.log('üìä Circuit breakers ativos:', stats.data.data.circuitBreakers);
  
  // Resetar circuit breakers
  await api.post('/api/performance/reset-circuit-breakers');
  console.log('üîÑ Circuit breakers resetados');
  
  // Restaurar configura√ß√£o
  await api.put('/api/performance/config', {
    criticalRequestThreshold: 15000
  });
}

// Fun√ß√£o para testar diagn√≥stico
async function testDiagnosis() {
  console.log('\nüîç Testando diagn√≥stico avan√ßado...');
  
  const response = await api.get('/api/performance/diagnose');
  const diagnosis = response.data.data;
  
  console.log('üìä Diagn√≥stico:');
  console.log(`  ‚Ä¢ Requisi√ß√µes ativas: ${diagnosis.activeRequests}`);
  console.log(`  ‚Ä¢ Tempo m√©dio: ${diagnosis.averageActiveRequestTime}ms`);
  console.log(`  ‚Ä¢ Circuit breakers: ${diagnosis.circuitBreakers.length}`);
  console.log(`  ‚Ä¢ Problemas encontrados: ${diagnosis.issues.length}`);
  
  if (diagnosis.issues.length > 0) {
    console.log('‚ö†Ô∏è Problemas:');
    diagnosis.issues.forEach(issue => console.log(`  - ${issue}`));
    
    console.log('üí° Recomenda√ß√µes:');
    diagnosis.recommendations.forEach(rec => console.log(`  - ${rec}`));
  }
}

// Fun√ß√£o para testar health check avan√ßado
async function testAdvancedHealthCheck() {
  console.log('\nüè• Testando health check avan√ßado...');
  
  const response = await api.get('/api/performance/health');
  const health = response.data;
  
  console.log(`üìä Status: ${health.status} (${response.status})`);
  console.log(`‚è±Ô∏è  Uptime: ${Math.round(health.data.uptime)}s`);
  console.log(`üíæ Mem√≥ria: ${Math.round(health.data.memory.used / 1024 / 1024)}MB`);
  console.log(`üîÑ Requisi√ß√µes ativas: ${health.data.activeRequests}`);
  
  if (health.data.issues.length > 0) {
    console.log('‚ö†Ô∏è Problemas de sa√∫de detectados:');
    health.data.issues.forEach(issue => console.log(`  - ${issue}`));
  }
}

// Fun√ß√£o para demonstrar funcionalidades de emerg√™ncia
async function testEmergencyFeatures() {
  console.log('\nüö® Testando funcionalidades de emerg√™ncia...');
  
  // Fazer algumas requisi√ß√µes em background
  console.log('üì§ Iniciando requisi√ß√µes em background...');
  const backgroundPromises = Array.from({ length: 5 }, () => 
    api.get('/api/performance/stats')
  );
  
  // Aguardar um pouco
  await new Promise(resolve => setTimeout(resolve, 100));
  
  // Verificar requisi√ß√µes ativas
  const statsBefore = await api.get('/api/performance/stats');
  console.log(`üìä Requisi√ß√µes ativas antes: ${statsBefore.data.data.activeRequests}`);
  
  // Matar todas as requisi√ß√µes ativas (emerg√™ncia)
  await api.post('/api/performance/kill-requests');
  console.log('üö® Todas as requisi√ß√µes ativas foram canceladas');
  
  // Verificar ap√≥s cancelamento
  const statsAfter = await api.get('/api/performance/stats');
  console.log(`üìä Requisi√ß√µes ativas depois: ${statsAfter.data.data.activeRequests}`);
  
  // Aguardar as promises em background terminarem
  await Promise.allSettled(backgroundPromises);
}

// Fun√ß√£o principal
async function runAdvancedPerformanceTests() {
  console.log('üöÄ INICIANDO TESTES AVAN√áADOS DE PERFORMANCE');
  console.log('=' .repeat(50));
  
  try {
    // Verificar se o servidor est√° rodando
    console.log('üîç Verificando conex√£o com o servidor...');
    await api.get('/health');
    console.log('‚úÖ Servidor conectado com sucesso!');
    
    // Executar testes
    await testAdvancedHealthCheck();
    await testDiagnosis();
    await testConcurrentRequests(15);
    await testCustomTimeout();
    await testCircuitBreaker();
    await testEmergencyFeatures();
    
    // Estat√≠sticas finais
    console.log('\nüìä ESTAT√çSTICAS FINAIS:');
    const finalStats = await api.get('/api/performance/stats');
    console.log(JSON.stringify(finalStats.data.data, null, 2));
    
    console.log('\n‚úÖ TODOS OS TESTES CONCLU√çDOS COM SUCESSO!');
    
  } catch (error) {
    console.error('‚ùå ERRO DURANTE OS TESTES:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('üí° Certifique-se de que o servidor est√° rodando em ' + BASE_URL);
    }
  }
}

// Executar testes se chamado diretamente
if (require.main === module) {
  runAdvancedPerformanceTests();
}

module.exports = {
  runAdvancedPerformanceTests,
  testConcurrentRequests,
  testCustomTimeout,
  testCircuitBreaker,
  testDiagnosis,
  testAdvancedHealthCheck,
  testEmergencyFeatures
}; 