// test-performance.js - Script para testar a performance do sistema
const axios = require('axios');

const API_BASE_URL = 'http://localhost:3001/api';

// Fun√ß√£o para medir tempo de resposta
const measureResponseTime = async (url, description) => {
  const startTime = Date.now();
  try {
    const response = await axios.get(url);
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.log(`‚úÖ ${description}: ${duration}ms`);
    return { success: true, duration, status: response.status };
  } catch (error) {
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.log(`‚ùå ${description}: ${duration}ms (Erro: ${error.message})`);
    return { success: false, duration, error: error.message };
  }
};

// Fun√ß√£o para testar m√∫ltiplas requisi√ß√µes simult√¢neas
const testConcurrentRequests = async (url, description, count = 10) => {
  console.log(`\nüîÑ Testando ${count} requisi√ß√µes simult√¢neas para ${description}...`);
  
  const promises = [];
  for (let i = 0; i < count; i++) {
    promises.push(measureResponseTime(url, `${description} #${i + 1}`));
  }
  
  const results = await Promise.all(promises);
  
  const successful = results.filter(r => r.success);
  const failed = results.filter(r => !r.success);
  
  if (successful.length > 0) {
    const avgDuration = successful.reduce((sum, r) => sum + r.duration, 0) / successful.length;
    const minDuration = Math.min(...successful.map(r => r.duration));
    const maxDuration = Math.max(...successful.map(r => r.duration));
    
    console.log(`üìä Resultados para ${description}:`);
    console.log(`   ‚úÖ Sucessos: ${successful.length}/${count}`);
    console.log(`   ‚ùå Falhas: ${failed.length}/${count}`);
    console.log(`   ‚è±Ô∏è  Tempo m√©dio: ${Math.round(avgDuration)}ms`);
    console.log(`   üêå Tempo m√≠nimo: ${minDuration}ms`);
    console.log(`   üêå Tempo m√°ximo: ${maxDuration}ms`);
  }
  
  return results;
};

// Fun√ß√£o principal de teste
async function testPerformance() {
  console.log('üöÄ Iniciando testes de performance...\n');
  
  try {
    // 1. Teste de health check
    console.log('1Ô∏è‚É£ Testando health check...');
    await measureResponseTime(`${API_BASE_URL.replace('/api', '')}/health`, 'Health Check');
    
    // 2. Teste de estat√≠sticas
    console.log('\n2Ô∏è‚É£ Testando endpoint de estat√≠sticas...');
    await measureResponseTime(`${API_BASE_URL}/stats`, 'Stats');
    
    // 3. Teste de diagn√≥stico de performance
    console.log('\n3Ô∏è‚É£ Testando diagn√≥stico de performance...');
    await measureResponseTime(`${API_BASE_URL}/performance/diagnose`, 'Performance Diagnosis');
    
    // 4. Teste de conex√£o com banco
    console.log('\n4Ô∏è‚É£ Testando conex√£o com banco...');
    await measureResponseTime(`${API_BASE_URL}/test-db`, 'Database Connection');
    
    // 5. Teste de pacientes (com cache)
    console.log('\n5Ô∏è‚É£ Testando endpoint de pacientes...');
    await measureResponseTime(`${API_BASE_URL}/pacientes`, 'Pacientes List');
    
    // 6. Teste de requisi√ß√µes simult√¢neas para pacientes
    await testConcurrentRequests(`${API_BASE_URL}/pacientes`, 'Pacientes List', 5);
    
    // 7. Teste de cl√≠nicas
    console.log('\n6Ô∏è‚É£ Testando endpoint de cl√≠nicas...');
    await measureResponseTime(`${API_BASE_URL}/clinicas`, 'Clinicas List');
    
    // 8. Teste de protocolos
    console.log('\n7Ô∏è‚É£ Testando endpoint de protocolos...');
    await measureResponseTime(`${API_BASE_URL}/protocolos`, 'Protocolos List');
    
    // 9. Teste de solicita√ß√µes
    console.log('\n8Ô∏è‚É£ Testando endpoint de solicita√ß√µes...');
    await measureResponseTime(`${API_BASE_URL}/solicitacoes`, 'Solicitacoes List');
    
    // 10. Teste de cache (segunda requisi√ß√£o deve ser mais r√°pida)
    console.log('\n9Ô∏è‚É£ Testando cache (segunda requisi√ß√£o)...');
    await measureResponseTime(`${API_BASE_URL}/pacientes`, 'Pacientes List (Cached)');
    
    // 11. Teste de stress (muitas requisi√ß√µes)
    console.log('\nüîü Teste de stress...');
    await testConcurrentRequests(`${API_BASE_URL}/pacientes`, 'Stress Test', 20);
    
    console.log('\n‚úÖ Testes de performance conclu√≠dos!');
    console.log('\nüìä Para ver estat√≠sticas detalhadas, acesse:');
    console.log(`   ${API_BASE_URL}/stats`);
    console.log(`   ${API_BASE_URL}/performance/diagnose`);
    
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
    console.log('\nüí° Certifique-se de que o servidor est√° rodando em http://localhost:3001');
  }
}

// Executar testes se o script for chamado diretamente
if (require.main === module) {
  testPerformance();
}

module.exports = { testPerformance, measureResponseTime, testConcurrentRequests }; 