// test-correcoes-pdf.js - Teste para verificar as corre√ß√µes do PDF
const axios = require('axios');

const API_BASE_URL = 'http://localhost:3001/api';

async function testCorrecoesPDF() {
  try {
    console.log('üß™ Testando corre√ß√µes do PDF...\n');
    
    const dadosSolicitacao = {
      clinica_id: 1,
      hospital_nome: 'Cl√≠nica Teste Corre√ß√µes',
      hospital_codigo: 'TEST008',
      cliente_nome: 'Paciente Teste Corre√ß√µes',
      cliente_codigo: 'PAC008',
      sexo: 'M',
      data_nascimento: '1980-01-01',
      idade: 45,
      data_solicitacao: '2025-01-29',
      diagnostico_cid: 'C25',
      diagnostico_descricao: 'Adenocarcinoma de p√¢ncreas',
      
      // Campos espec√≠ficos para testar
      local_metastases: 'F√≠gado, pulm√£o e ossos',
      estagio_t: 'T3',
      estagio_n: 'N1',
      estagio_m: 'M1',
      estagio_clinico: 'IV',
      
      // Tratamentos anteriores
      tratamento_cirurgia_radio: 'N√£o realizado',
      tratamento_quimio_adjuvante: 'N√£o realizado',
      tratamento_quimio_primeira_linha: 'FOLFIRINOX - 6 ciclos',
      tratamento_quimio_segunda_linha: 'Gemcitabina + Nab-paclitaxel - 4 ciclos',
      
      // Protocolo terap√™utico
      finalidade: 'paliativo',
      performance_status: 'BOA',
      siglas: 'FOLFIRINOX',
      ciclos_previstos: 6,
      ciclo_atual: 1,
      superficie_corporal: 1.8,
      peso: 70,
      altura: 170,
      
      // Medicamentos antineopl√°sicos
      medicamentos_antineoplasticos: 'Oxaliplatina 85mg/m¬≤ EV D1 √∫nico; Leucovorina 400mg/m¬≤ EV D1,D2 1x; Irinotecano 180mg/m¬≤ EV D1 √∫nico',
      dose_por_m2: '85mg/m¬≤',
      dose_total: '153mg',
      via_administracao: 'EV',
      dias_aplicacao_intervalo: 'D1 a cada 14 dias',
      
      // Medica√ß√µes coadjuvantes
      medicacoes_associadas: 'Ondansetrona 8mg EV 30min antes da quimioterapia\nDexametasona 8mg EV 30min antes da quimioterapia\nMetoclopramida 10mg VO 3x/dia por 3 dias\nPantoprazol 40mg VO 1x/dia\nFilgrastim 300mcg SC D3-D7',
      
      medico_assinatura_crm: 'CRM 123456/SP'
    };
    
    console.log('üì§ Criando solicita√ß√£o de teste...');
    const createResponse = await axios.post(`${API_BASE_URL}/solicitacoes`, dadosSolicitacao);
    
    if (createResponse.data.success) {
      const solicitacaoId = createResponse.data.data.id;
      console.log('‚úÖ Solicita√ß√£o criada com ID:', solicitacaoId);
      
      // Gerar PDF
      console.log('üìÑ Gerando PDF...');
      const pdfResponse = await axios.get(`${API_BASE_URL}/solicitacoes/${solicitacaoId}/pdf`, {
        responseType: 'arraybuffer'
      });
      
      console.log('‚úÖ PDF gerado com sucesso!');
      console.log('üìè Tamanho do PDF:', (pdfResponse.data.length / 1024).toFixed(2), 'KB');
      
      // Salvar PDF para verifica√ß√£o
      const fs = require('fs');
      const fileName = `teste-correcoes-pdf-${solicitacaoId}.pdf`;
      fs.writeFileSync(fileName, pdfResponse.data);
      console.log('üíæ PDF salvo como:', fileName);
      
      console.log('\nüìã Corre√ß√µes testadas:');
      console.log('‚úÖ 1. Fonte padronizada: Source Sans Pro em todo o documento');
      console.log('‚úÖ 2. Espa√ßamento reduzido: margin-bottom de 12px para 8px entre se√ß√µes');
      console.log('‚úÖ 3. Nome atualizado: "Low Cost Onco" ‚Üí "Onkhos"');
      console.log('');
      console.log('üëÄ Abra o arquivo PDF para verificar:');
      console.log('   ‚Ä¢ Se a fonte est√° consistente em todo o documento');
      console.log('   ‚Ä¢ Se o espa√ßamento entre se√ß√µes est√° menor');
      console.log('   ‚Ä¢ Se o nome "Onkhos" aparece no rodap√©');
      console.log('   ‚Ä¢ Se os campos espec√≠ficos aparecem corretamente');
      
    } else {
      console.log('‚ùå Erro ao criar solicita√ß√£o:', createResponse.data.message);
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', {
      message: error.message,
      response: error.response?.data,
      status: error.response?.status
    });
  }
}

// Executar teste
testCorrecoesPDF(); 